{
  "pageProps": {
    "code": "type LogLevel = 'debug' | 'info' | 'warn' | 'error';\n\ninterface LoggerConfig {\n  level?: LogLevel;\n  timestamp?: boolean;\n}\n\nconst levelColors: Record<LogLevel, string> = {\n  debug: '\\x1b[36m', // cyan\n  info: '\\x1b[32m', // green\n  warn: '\\x1b[33m', // yellow\n  error: '\\x1b[31m', // red\n};\n\nconst levelOrder: Record<LogLevel, number> = {\n  debug: 0,\n  info: 1,\n  warn: 2,\n  error: 3,\n};\n\nconst resetColor = '\\x1b[0m';\n\nexport const createLogger = (config: LoggerConfig = {}) => {\n  const level = config.level ?? 'info';\n  const timestamp = config.timestamp ?? true;\n\n  const shouldLog = (msgLevel: LogLevel) => levelOrder[msgLevel] >= levelOrder[level];\n\n  const formatMessage = (msgLevel: LogLevel, message: string, context?: string): string => {\n    const color = levelColors[msgLevel];\n    const timeStr = timestamp ? `[${new Date().toISOString()}] ` : '';\n    const contextStr = context ? `[${context}] ` : '';\n    return `${color}${timeStr}${contextStr}${msgLevel.toUpperCase()}: ${message}${resetColor}`;\n  };\n\n  const log = (msgLevel: LogLevel, message: string, context?: string) => {\n    if (!shouldLog(msgLevel)) return;\n    console.log(formatMessage(msgLevel, message, context));\n  };\n\n  return {\n    debug: (msg: string, ctx?: string) => log('debug', msg, ctx),\n    info: (msg: string, ctx?: string) => log('info', msg, ctx),\n    warn: (msg: string, ctx?: string) => log('warn', msg, ctx),\n    error: (msg: string, ctx?: string) => log('error', msg, ctx),\n  };\n};\n"
  },
  "__N_SSG": true
}
