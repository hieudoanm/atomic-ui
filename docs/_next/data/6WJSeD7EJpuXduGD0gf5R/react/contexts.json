{
  "pageProps": {
    "contexts": [
      {
        "id": "LanguageContext",
        "group": "context",
        "name": "LanguageContext",
        "emoji": "üåê",
        "code": "import { createContext, FC, ReactNode, useCallback, useContext, useMemo, useState } from 'react';\n\nexport enum Language {\n  English = 'en',\n  Spanish = 'es',\n  French = 'fr',\n  German = 'de',\n  Italian = 'it',\n  Portuguese = 'pt',\n  Russian = 'ru',\n  ChineseSimplified = 'zh',\n  ChineseTraditional = 'zh-TW',\n  Japanese = 'ja',\n  Korean = 'ko',\n  Arabic = 'ar',\n  Hindi = 'hi',\n  Vietnamese = 'vi',\n  Dutch = 'nl',\n  Greek = 'el',\n  Turkish = 'tr',\n  Polish = 'pl',\n  Hebrew = 'he',\n  Swedish = 'sv',\n  Danish = 'da',\n  Norwegian = 'no',\n  Finnish = 'fi',\n  Thai = 'th',\n  Indonesian = 'id',\n  Malay = 'ms',\n  Czech = 'cs',\n  Hungarian = 'hu',\n  Romanian = 'ro',\n  Ukrainian = 'uk',\n  Persian = 'fa',\n}\n\ntype Namespace = Record<string, string>;\ntype NamespacedTranslations = Record<string, Namespace>;\ntype LanguageMap = Partial<Record<Language, NamespacedTranslations>>;\n\ninterface LanguageContextProps {\n  language: Language;\n  setLanguage: (lang: Language) => void;\n  t: (key: string, fallback?: string) => string;\n}\n\ninterface LanguageProviderProps {\n  children: ReactNode;\n  languageMap: LanguageMap;\n  defaultLanguage?: Language;\n  persist?: boolean;\n}\n\nconst LanguageContext = createContext<LanguageContextProps | undefined>(undefined);\n\nconst LANGUAGE_STORAGE_KEY = 'app_language';\n\nexport const LanguageProvider: FC<LanguageProviderProps> = ({\n  children,\n  languageMap,\n  defaultLanguage = Language.English,\n  persist = true,\n}) => {\n  const getInitialLanguage = (): Language => {\n    if (persist && typeof localStorage !== 'undefined') {\n      const stored = localStorage.getItem(LANGUAGE_STORAGE_KEY);\n      if (stored && stored in Language) return stored as Language;\n    }\n\n    const browserLang = navigator.language.split('-')[0] as Language;\n    return browserLang in Language ? browserLang : defaultLanguage;\n  };\n\n  const [language, setLanguage] = useState<Language>(getInitialLanguage);\n\n  const setLanguageToLocalStorage = (lang: Language) => {\n    setLanguage(lang);\n    if (persist) localStorage.setItem(LANGUAGE_STORAGE_KEY, lang);\n  };\n\n  const translations = useMemo(() => languageMap[language] ?? {}, [language, languageMap]);\n\n  const t = useCallback(\n    (nsKey: string, key?: string, fallback?: string): string => {\n      let ns: string;\n      let actualKey: string;\n\n      // Support t(\"common.greeting\") and t(\"common\", \"greeting\")\n      if (key) {\n        ns = nsKey;\n        actualKey = key;\n      } else {\n        const parts = nsKey.split('.');\n        ns = parts[0];\n        actualKey = parts.slice(1).join('.');\n      }\n\n      const namespace = translations[ns];\n      const value = namespace?.[actualKey];\n\n      if (!value) {\n        console.warn(`Missing translation for \"${ns}.${actualKey}\" in language \"${language}\"`);\n      }\n\n      return value ?? fallback ?? actualKey;\n    },\n    [translations, language]\n  );\n\n  const value = useMemo(\n    () => ({\n      language,\n      setLanguage: setLanguageToLocalStorage,\n      t,\n    }),\n    [language, setLanguageToLocalStorage, t]\n  );\n\n  return <LanguageContext.Provider value={value}>{children}</LanguageContext.Provider>;\n};\n\nexport const useLanguage = () => {\n  const context = useContext(LanguageContext);\n  if (!context) throw new Error('useLanguage must be used within a LanguageProvider');\n  return context;\n};\n\nexport const useTranslation = () => {\n  const context = useLanguage();\n  return context.t;\n};\n"
      },
      {
        "id": "ModalContext",
        "group": "context",
        "name": "ModalContext",
        "emoji": "ü™ü",
        "code": "import React, { createContext, useCallback, useContext, useMemo, useState } from 'react';\n\ntype ModalContextType = {\n  isOpen: boolean;\n  modalContent: React.ReactNode | null;\n  openModal: (content: React.ReactNode) => void;\n  closeModal: () => void;\n};\n\nconst ModalContext = createContext<ModalContextType | undefined>(undefined);\n\nexport const ModalProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [modalContent, setModalContent] = useState<React.ReactNode | null>(null);\n\n  const openModal = useCallback((content: React.ReactNode) => {\n    setModalContent(content);\n    setIsOpen(true);\n  }, []);\n\n  const closeModal = useCallback(() => {\n    setIsOpen(false);\n    setModalContent(null);\n  }, []);\n\n  const value = useMemo(\n    () => ({ isOpen, modalContent, openModal, closeModal }),\n    [isOpen, modalContent, openModal, closeModal]\n  );\n\n  return <ModalContext.Provider value={value}>{children}</ModalContext.Provider>;\n};\n\nexport const useModal = (): ModalContextType => {\n  const context = useContext(ModalContext);\n  if (!context) {\n    throw new Error('useModal must be used within a ModalProvider');\n  }\n  return context;\n};\n"
      },
      {
        "id": "NotificationContext",
        "group": "context",
        "name": "NotificationContext",
        "emoji": "üîî",
        "code": "import { createContext, ReactNode, useContext, useEffect, useMemo, useRef, useState } from 'react';\n\nexport enum NotificationType {\n  Info = 'info',\n  Success = 'success',\n  Warning = 'warning',\n  Error = 'error',\n}\n\nexport interface Notification {\n  id: string;\n  type: NotificationType;\n  message: string;\n  title?: string;\n  dismissible: boolean;\n}\n\ninterface NotificationContextProps {\n  notifications: Notification[];\n  addNotification: (\n    type: NotificationType,\n    message: string,\n    options?: {\n      title?: string;\n      dismissible?: boolean;\n      timeout?: number;\n    }\n  ) => string;\n  removeNotification: (id: string) => void;\n}\n\nconst NotificationContext = createContext<NotificationContextProps | undefined>(undefined);\n\nexport const NotificationProvider = ({ children }: { children: ReactNode }) => {\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n  const timeoutRefs = useRef<Record<string, NodeJS.Timeout>>({});\n\n  useEffect(() => {\n    return () => {\n      Object.values(timeoutRefs.current).forEach(clearTimeout);\n    };\n  }, []);\n\n  const removeNotification = (id: string) => {\n    setNotifications((prev) => prev.filter((n) => n.id !== id));\n    const ref = timeoutRefs.current[id];\n    if (ref) {\n      clearTimeout(ref);\n      delete timeoutRefs.current[id];\n    }\n  };\n\n  const addNotification = (\n    type: NotificationType,\n    message: string,\n    options?: {\n      title?: string;\n      dismissible?: boolean;\n      timeout?: number;\n    }\n  ): string => {\n    const id = crypto.randomUUID();\n    const { title, dismissible = true, timeout = 3000 } = options ?? {};\n\n    const notification: Notification = { id, type, message, title, dismissible };\n\n    setNotifications((prev) => {\n      const exists = prev.some((n) => n.message === message && n.type === type);\n      return exists ? prev : [...prev, notification];\n    });\n\n    timeoutRefs.current[id] = setTimeout(() => {\n      removeNotification(id);\n    }, timeout);\n\n    return id;\n  };\n\n  const value = useMemo(\n    () => ({\n      notifications,\n      addNotification,\n      removeNotification,\n    }),\n    [notifications]\n  );\n\n  return <NotificationContext.Provider value={value}>{children}</NotificationContext.Provider>;\n};\n\nexport const useNotification = (): NotificationContextProps => {\n  const context = useContext(NotificationContext);\n  if (!context) throw new Error('useNotification must be used within a NotificationProvider');\n  return context;\n};\n"
      },
      {
        "id": "SettingsContext",
        "group": "context",
        "name": "SettingsContext",
        "emoji": "‚öôÔ∏è",
        "code": "import React, { createContext, useState, useCallback, useMemo, useContext } from 'react';\n\ntype Settings = {\n  darkMode: boolean;\n  compactMode: boolean;\n  language: string;\n};\n\ntype SettingsContextType = {\n  settings: Settings;\n  updateSetting: <K extends keyof Settings>(key: K, value: Settings[K]) => void;\n  resetSettings: () => void;\n};\n\nconst defaultSettings: Settings = {\n  darkMode: false,\n  compactMode: false,\n  language: 'en',\n};\n\nconst SettingsContext = createContext<SettingsContextType | undefined>(undefined);\n\nexport const SettingsProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [settings, setSettings] = useState<Settings>(defaultSettings);\n\n  const updateSetting = useCallback(<K extends keyof Settings>(key: K, value: Settings[K]) => {\n    setSettings((prev) => ({ ...prev, [key]: value }));\n  }, []);\n\n  const resetSettings = useCallback(() => {\n    setSettings(defaultSettings);\n  }, []);\n\n  const value = useMemo(() => ({ settings, updateSetting, resetSettings }), [settings, updateSetting, resetSettings]);\n\n  return <SettingsContext.Provider value={value}>{children}</SettingsContext.Provider>;\n};\n\nexport const useSettings = (): SettingsContextType => {\n  const context = useContext(SettingsContext);\n  if (!context) {\n    throw new Error('useSettings must be used within a SettingsProvider');\n  }\n  return context;\n};\n"
      },
      {
        "id": "ThemeContext",
        "group": "context",
        "name": "ThemeContext",
        "emoji": "üé®",
        "code": "import { createContext, useContext, useEffect, useState, ReactNode, useMemo } from 'react';\n\ntype Theme = 'light' | 'dark';\n\ninterface ThemeContextProps {\n  theme: Theme;\n  toggleTheme: () => void;\n  setTheme: (theme: Theme) => void;\n}\n\nconst ThemeContext = createContext<ThemeContextProps | undefined>(undefined);\n\nexport const ThemeProvider = ({ children }: { children: ReactNode }) => {\n  const [theme, setTheme] = useState<Theme>('light');\n\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('theme') as Theme | null;\n    if (savedTheme) {\n      setTheme(savedTheme);\n    } else {\n      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n      setTheme(prefersDark ? 'dark' : 'light');\n    }\n  }, []);\n\n  useEffect(() => {\n    document.documentElement.classList.toggle('dark', theme === 'dark');\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme((prev) => (prev === 'light' ? 'dark' : 'light'));\n  };\n\n  const value = useMemo(() => ({ theme, toggleTheme, setTheme }), [theme]);\n\n  return <ThemeContext.Provider value={value}>{children}</ThemeContext.Provider>;\n};\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (!context) throw new Error('useTheme must be used within a ThemeProvider');\n  return context;\n};\n"
      },
      {
        "id": "UserContext",
        "group": "context",
        "name": "UserContext",
        "emoji": "üë§",
        "code": "import { createContext, useContext, useEffect, useMemo, useReducer } from 'react';\n\ntype User = {\n  id: string | null;\n  name: string;\n  email: string;\n  token: string | null;\n  isAuthenticated: boolean;\n};\n\ntype UserAction =\n  | { type: 'LOGIN'; payload: Omit<User, 'isAuthenticated'> }\n  | { type: 'LOGOUT' }\n  | { type: 'UPDATE_PROFILE'; payload: Partial<Omit<User, 'isAuthenticated' | 'token'>> };\n\nconst defaultUser: User = {\n  id: null,\n  name: '',\n  email: '',\n  token: null,\n  isAuthenticated: false,\n};\n\nconst UserContext = createContext<{\n  state: User;\n  dispatch: React.Dispatch<UserAction>;\n}>({\n  state: defaultUser,\n  dispatch: () => null,\n});\n\nfunction userReducer(state: User, action: UserAction): User {\n  switch (action.type) {\n    case 'LOGIN':\n      return {\n        ...action.payload,\n        isAuthenticated: true,\n      };\n    case 'LOGOUT':\n      return { ...defaultUser };\n    case 'UPDATE_PROFILE':\n      return {\n        ...state,\n        ...action.payload,\n      };\n    default:\n      return state;\n  }\n}\n\nexport const UserProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [state, dispatch] = useReducer(userReducer, defaultUser, () => {\n    if (typeof window !== 'undefined') {\n      const stored = localStorage.getItem('user');\n      return stored ? JSON.parse(stored) : defaultUser;\n    }\n    return defaultUser;\n  });\n\n  useEffect(() => {\n    localStorage.setItem('user', JSON.stringify(state));\n  }, [state]);\n\n  const value = useMemo(() => ({ state, dispatch }), [state]);\n\n  return <UserContext.Provider value={value}>{children}</UserContext.Provider>;\n};\n\nexport const useUser = () => useContext(UserContext);\n"
      }
    ]
  },
  "__N_SSG": true
}
