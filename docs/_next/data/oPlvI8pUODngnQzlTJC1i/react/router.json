{
  "pageProps": {
    "code": "import React, { createContext, useContext, useEffect, useState, ReactNode, useMemo } from 'react';\n\ninterface RouterContextType {\n  path: string;\n  navigate: (to: string) => void;\n}\n\nconst RouterContext = createContext<RouterContextType | undefined>(undefined);\n\ninterface RouterProps {\n  children: ReactNode;\n}\n\nexport const Router: React.FC<RouterProps> = ({ children }) => {\n  const [path, setPath] = useState<string>(window.location.pathname);\n\n  useEffect(() => {\n    const handlePop = () => setPath(window.location.pathname);\n    window.addEventListener('popstate', handlePop);\n    return () => window.removeEventListener('popstate', handlePop);\n  }, []);\n\n  const navigate = (to: string) => {\n    window.history.pushState({}, '', to);\n    setPath(to);\n  };\n\n  // useMemo to memoize the context value object\n  const contextValue = useMemo(() => ({ path, navigate }), [path]);\n\n  return <RouterContext.Provider value={contextValue}>{children}</RouterContext.Provider>;\n};\n\ninterface RouteProps {\n  path: string;\n  component: ReactNode;\n}\n\nexport const Route: React.FC<RouteProps> = ({ path, component }) => {\n  const context = useContext(RouterContext);\n  if (!context) throw new Error('Route must be used within a Router');\n\n  return context.path === path ? <>{component}</> : null;\n};\n\ninterface LinkProps {\n  to: string;\n  children: ReactNode;\n}\n\nexport const Link: React.FC<LinkProps> = ({ to, children }) => {\n  const context = useContext(RouterContext);\n  if (!context) throw new Error('Link must be used within a Router');\n\n  const handleClick = (e: React.MouseEvent<HTMLAnchorElement>) => {\n    e.preventDefault();\n    context.navigate(to);\n  };\n\n  return (\n    <a href={to} onClick={handleClick}>\n      {children}\n    </a>\n  );\n};\n"
  },
  "__N_SSG": true
}
