{
  "pageProps": {
    "utils": [
      {
        "id": "array-chunk",
        "group": "array",
        "name": "Chunk",
        "emoji": "üì¶",
        "code": "export const chunk = <T>(array: T[], size: number): T[][] => {\n  const result: T[][] = [];\n  for (let i = 0; i < array.length; i += size) {\n    result.push(array.slice(i, i + size));\n  }\n  return result;\n};\n"
      },
      {
        "id": "array-compact",
        "group": "array",
        "name": "Compact",
        "emoji": "üßπ",
        "code": "export const compact = <T>(array: (T | null | undefined | false | '' | 0)[]): T[] => {\n  return array.filter(Boolean) as T[];\n};\n"
      },
      {
        "id": "array-difference",
        "group": "array",
        "name": "Difference",
        "emoji": "‚ûñ",
        "code": "export const difference = <T>(a: T[], b: T[]): T[] => {\n  const setB = new Set(b);\n  return a.filter((item) => !setB.has(item));\n};\n"
      },
      {
        "id": "array-group-by",
        "group": "array",
        "name": "Group By",
        "emoji": "üóÇÔ∏è",
        "code": "export const groupBy = <T, K extends keyof T>(array: T[], key: K): Record<string, T[]> => {\n  return array.reduce((acc: Record<string, T[]>, item: T) => {\n    const groupKey = String(item[key]);\n    if (!acc[groupKey]) {\n      acc[groupKey] = [];\n    }\n    acc[groupKey].push(item);\n    return acc;\n  }, {});\n};\n"
      },
      {
        "id": "array-intersection",
        "group": "array",
        "name": "Intersection",
        "emoji": "üîó",
        "code": "export const intersection = <T>(a: T[], b: T[]): T[] => {\n  const setB = new Set(b);\n  return a.filter((item) => setB.has(item));\n};\n"
      },
      {
        "id": "array-shuffle",
        "group": "array",
        "name": "Shuffle",
        "emoji": "üîÄ",
        "code": "export const shuffle = <T>(array: T[]): T[] => {\n  const result = [...array];\n  for (let i = result.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [result[i], result[j]] = [result[j], result[i]];\n  }\n  return result;\n};\n"
      },
      {
        "id": "array-union",
        "group": "array",
        "name": "Union",
        "emoji": "‚ö°",
        "code": "export const union = <T>(...arrays: T[][]): T[] => {\n  const set = new Set<T>();\n  for (const array of arrays) {\n    array.forEach((item) => set.add(item));\n  }\n  return Array.from(set);\n};\n"
      },
      {
        "id": "array-unique",
        "group": "array",
        "name": "Unique",
        "emoji": "üîë",
        "code": "export const unique = <T>(array: T[]): T[] => {\n  return Array.from(new Set(array));\n};\n"
      },
      {
        "id": "clipboard-copy",
        "group": "clipboard",
        "name": "Copy",
        "emoji": "üìã",
        "code": "export const copy = (text: string): void => {\n  navigator.clipboard\n    .writeText(text)\n    .then(() => {\n      alert('Copied to clipboard!');\n    })\n    .catch((error) => {\n      console.error('Failed to copy: ', error);\n    });\n};\n"
      },
      {
        "id": "clipboard-paste",
        "group": "clipboard",
        "name": "Paste",
        "emoji": "üì•",
        "code": "export const paste = async (): Promise<string> => {\n  try {\n    const text = await navigator.clipboard.readText();\n    return text;\n  } catch (error) {\n    console.error('Failed to read clipboard contents:', error);\n    return '';\n  }\n};\n"
      },
      {
        "id": "date-format",
        "group": "date",
        "name": "Date Format",
        "emoji": "üìÖ",
        "code": "export const padZero = (n: number) => String(n).padStart(2, '0');\n\nexport const formatDate = (date: Date, separator = '-') => {\n  const yyyy = date.getFullYear();\n  const mm = padZero(date.getMonth() + 1);\n  const dd = padZero(date.getDate());\n  return `${yyyy}${separator}${mm}${separator}${dd}`;\n};\n\nexport const formatTime = (date: Date, withSeconds = false) => {\n  const hh = padZero(date.getHours());\n  const mm = padZero(date.getMinutes());\n  const ss = padZero(date.getSeconds());\n  return withSeconds ? `${hh}:${mm}:${ss}` : `${hh}:${mm}`;\n};\n\nexport const formatDateTime = (date: Date) => {\n  return `${formatDate(date)} ${formatTime(date, true)}`;\n};\n\nexport const format = (date: Date) => {\n  return {\n    date: (separator = '-') => formatDate(date, separator),\n    time: (withSeconds = false) => formatTime(date, withSeconds),\n    dateTime: () => formatDate(date),\n  };\n};\n"
      },
      {
        "id": "date-diff",
        "group": "date",
        "name": "Date Diff",
        "emoji": "‚è≥",
        "code": "const ONE_SECOND = 1000;\nconst ONE_MINUTE = ONE_SECOND * 60;\nconst ONE_HOUR = ONE_MINUTE * 60;\nconst ONE_DAY = ONE_HOUR * 24;\n\nexport const diffInTime = (a: Date, b: Date): number => {\n  return Math.abs(a.getTime() - b.getTime());\n};\n\nexport const diffInDays = (a: Date, b: Date): number => {\n  return Math.floor(diffInTime(a, b) / ONE_DAY);\n};\n\nexport const diffInHours = (a: Date, b: Date): number => {\n  return Math.floor(diffInTime(a, b) / ONE_HOUR);\n};\n\nexport const diffInMinutes = (a: Date, b: Date): number => {\n  return Math.floor(diffInTime(a, b) / ONE_MINUTE);\n};\n\nexport const diffInSeconds = (a: Date, b: Date): number => {\n  return Math.floor(diffInTime(a, b) / ONE_SECOND);\n};\n\nexport const diff = (a: Date, b: Date) => {\n  return {\n    days: () => diffInDays(a, b),\n    hours: () => diffInHours(a, b),\n    minutes: () => diffInMinutes(a, b),\n    seconds: () => diffInSeconds(a, b),\n  };\n};\n"
      },
      {
        "id": "functional-memoize",
        "group": "functional",
        "name": "Memoize",
        "emoji": "üß†",
        "code": "/* eslint-disable @typescript-eslint/no-explicit-any */\n\n// Memoize function results based on JSON-stringified arguments\nexport const memoize = <T extends (...args: any[]) => any>(fn: T): T => {\n  const cache = new Map<string, ReturnType<T>>();\n  return ((...args: Parameters<T>): ReturnType<T> => {\n    const key = JSON.stringify(args);\n    if (cache.has(key)) {\n      return cache.get(key)!;\n    }\n    const result = fn(...args);\n    cache.set(key, result);\n    return result;\n  }) as T;\n};\n"
      },
      {
        "id": "functional-once",
        "group": "functional",
        "name": "Once",
        "emoji": "‚òùÔ∏è",
        "code": "/* eslint-disable @typescript-eslint/no-explicit-any */\n\n// Run a function only once, then always return the cached result\nexport const once = <T extends (...args: any[]) => any>(fn: T): T => {\n  let called = false;\n  let result: ReturnType<T>;\n  return ((...args: Parameters<T>): ReturnType<T> => {\n    if (!called) {\n      result = fn(...args);\n      called = true;\n    }\n    return result;\n  }) as T;\n};\n"
      },
      {
        "id": "functional-request",
        "group": "functional",
        "name": "Request",
        "emoji": "üì°",
        "code": "type FetchOptions = RequestInit & {\n  timeout?: number; // Optional timeout in milliseconds\n};\n\nexport const request = async <T = unknown>(url: string, options: FetchOptions = {}): Promise<T> => {\n  const { timeout = 8000, ...fetchOptions } = options;\n  const controller = new AbortController();\n  const timer = setTimeout(() => controller.abort(), timeout);\n\n  try {\n    const response = await fetch(url, {\n      ...fetchOptions,\n      signal: controller.signal,\n      headers: {\n        'Content-Type': 'application/json',\n        ...(fetchOptions.headers || {}),\n      },\n    });\n\n    clearTimeout(timer);\n\n    if (!response.ok) {\n      const errorBody = await response.text();\n      throw new Error(`HTTP ${response.status} - ${response.statusText}\\n${errorBody}`);\n    }\n\n    const contentType = response.headers.get('content-type');\n    if (contentType?.includes('application/json')) {\n      return (await response.json()) as T;\n    } else {\n      return (await response.text()) as unknown as T;\n    }\n  } catch (error) {\n    clearTimeout(timer);\n\n    if (error instanceof DOMException && error.name === 'AbortError') {\n      throw new Error('Request timed out');\n    } else if (error instanceof TypeError) {\n      throw new Error(`Network error or invalid URL: ${error.message}`);\n    } else {\n      throw error;\n    }\n  }\n};\n"
      },
      {
        "id": "functional-try-catch",
        "group": "functional",
        "name": "Try/Catch",
        "emoji": "üõ°Ô∏è",
        "code": "// Types for the result object with discriminated union\ntype Success<T> = {\n  data: T;\n  error: null;\n};\n\ntype Failure<E> = {\n  data: null;\n  error: E;\n};\n\ntype Result<T, E = Error> = Success<T> | Failure<E>;\n\n// Main wrapper function\nexport async function tryCatch<T, E = Error>(promise: Promise<T>): Promise<Result<T, E>> {\n  try {\n    const data = await promise;\n    return { data, error: null };\n  } catch (error) {\n    return { data: null, error: error as E };\n  }\n}\n"
      },
      {
        "id": "number-clamp",
        "group": "number",
        "name": "Clamp",
        "emoji": "üßÆ",
        "code": "export const clamp = (num: number, min: number, max: number): number => Math.min(Math.max(num, min), max);\n"
      },
      {
        "id": "number-commas",
        "group": "number",
        "name": "Commas",
        "emoji": "üî¢",
        "code": "export const commas = (number: number | bigint) => {\n  if (typeof number !== 'number' && typeof number !== 'bigint') return '';\n  return number.toLocaleString('en-US');\n};\n"
      },
      {
        "id": "number-currency",
        "group": "number",
        "name": "Currency",
        "emoji": "üí∞",
        "code": "export const currency = (number: number | bigint, currency = 'USD', locale = 'en-US') => {\n  if (typeof number !== 'number' && typeof number !== 'bigint') return '';\n  return new Intl.NumberFormat(locale, { style: 'currency', currency }).format(number);\n};\n"
      },
      {
        "id": "number-random",
        "group": "number",
        "name": "Random",
        "emoji": "üé≤",
        "code": "export const random = (min: number, max: number): number => Math.floor(Math.random() * (max - min + 1)) + min;\n"
      },
      {
        "id": "performance-debounce",
        "group": "performance",
        "name": "Debounce",
        "emoji": "üïí",
        "code": "/* eslint-disable @typescript-eslint/no-explicit-any */\n\nexport const debounce = <T extends (...args: any[]) => void>(\n  fn: T,\n  delay: number\n): ((...args: Parameters<T>) => void) => {\n  let timeoutId: ReturnType<typeof setTimeout>;\n\n  return (...args: Parameters<T>) => {\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => fn(...args), delay);\n  };\n};\n"
      },
      {
        "id": "performance-rate-limit",
        "group": "performance",
        "name": "Rate Limit",
        "emoji": "‚è≥",
        "code": "/* eslint-disable @typescript-eslint/no-explicit-any */\n\nexport const rateLimit = <T extends (...args: any[]) => any>(\n  fn: T,\n  limitMs: number\n): ((...args: Parameters<T>) => Promise<ReturnType<T>>) => {\n  let lastCallTime = 0;\n\n  return async function (...args: Parameters<T>): Promise<ReturnType<T>> {\n    const now = Date.now();\n    const timeSinceLastCall = now - lastCallTime;\n\n    if (timeSinceLastCall < limitMs) {\n      await new Promise((res) => setTimeout(res, limitMs - timeSinceLastCall));\n    }\n\n    lastCallTime = Date.now();\n    return fn(...args);\n  };\n};\n"
      },
      {
        "id": "performance-sleep",
        "group": "performance",
        "name": "Sleep",
        "emoji": "üò¥",
        "code": "export const sleep = (milliseconds: number): Promise<void> =>\n  new Promise((resolve) => setTimeout(resolve, milliseconds));\n"
      },
      {
        "id": "performance-throttle",
        "group": "performance",
        "name": "Throttle",
        "emoji": "üö¶",
        "code": "/* eslint-disable @typescript-eslint/no-explicit-any */\n\nexport const throttle = <T extends (...args: any[]) => void>(\n  fn: T,\n  limit: number\n): ((...args: Parameters<T>) => void) => {\n  let lastCall = 0;\n\n  return (...args: Parameters<T>) => {\n    const now = Date.now();\n    if (now - lastCall >= limit) {\n      lastCall = now;\n      fn(...args);\n    }\n  };\n};\n"
      },
      {
        "id": "storage-cookies",
        "group": "storage",
        "name": "Cookies",
        "emoji": "üç™",
        "code": "// Set a cookie\nexport const setCookie = (name: string, value: string, days?: number): void => {\n  let expires = '';\n  if (days) {\n    const date = new Date();\n    date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);\n    expires = `; expires=${date.toUTCString()}`;\n  }\n  document.cookie = `${name}=${encodeURIComponent(value)}${expires}; path=/`;\n};\n\n// Get a cookie by name\nexport const getCookie = (name: string): string | null => {\n  const regex = new RegExp('(^| )' + name + '=([^;]+)');\n  const result = regex.exec(document.cookie);\n  return result ? decodeURIComponent(result[2]) : null;\n};\n\n// Delete a cookie by name\nexport const deleteCookie = (name: string): void => {\n  setCookie(name, '', -1);\n};\n"
      },
      {
        "id": "storage-indexed.db",
        "group": "storage",
        "name": "Indexed DB",
        "emoji": "üíæ",
        "code": "interface IDBOptions {\n  dbName: string;\n  storeName: string;\n  version?: number;\n}\n\nconst openDB = ({ dbName, storeName, version = 1 }: IDBOptions): Promise<IDBDatabase> => {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open(dbName, version);\n\n    request.onupgradeneeded = () => {\n      const db = request.result;\n      if (!db.objectStoreNames.contains(storeName)) {\n        db.createObjectStore(storeName);\n      }\n    };\n\n    request.onsuccess = () => resolve(request.result);\n    request.onerror = () => {\n      const err = request.error;\n      reject(err instanceof Error ? err : new Error(String(err)));\n    };\n  });\n};\n\nexport const setItem = async <T>(key: string, value: T, options: IDBOptions): Promise<void> => {\n  const db = await openDB(options);\n  return new Promise((resolve, reject) => {\n    const transaction = db.transaction(options.storeName, 'readwrite');\n    const store = transaction.objectStore(options.storeName);\n    const request = store.put(value, key);\n\n    request.onsuccess = () => resolve();\n    request.onerror = () => {\n      const err = request.error;\n      reject(err instanceof Error ? err : new Error(String(err)));\n    };\n  });\n};\n\nexport const getItem = async <T>(key: string, options: IDBOptions): Promise<T | null> => {\n  const db = await openDB(options);\n  return new Promise((resolve, reject) => {\n    const transaction = db.transaction(options.storeName, 'readonly');\n    const store = transaction.objectStore(options.storeName);\n    const request = store.get(key);\n\n    request.onsuccess = () => resolve(request.result ?? null);\n    request.onerror = () => {\n      const err = request.error;\n      reject(err instanceof Error ? err : new Error(String(err)));\n    };\n  });\n};\n\nexport const deleteItem = async (key: string, options: IDBOptions): Promise<void> => {\n  const db = await openDB(options);\n  return new Promise((resolve, reject) => {\n    const transaction = db.transaction(options.storeName, 'readwrite');\n    const store = transaction.objectStore(options.storeName);\n    const request = store.delete(key);\n\n    request.onsuccess = () => resolve();\n    request.onerror = () => {\n      const err = request.error;\n      reject(err instanceof Error ? err : new Error(String(err)));\n    };\n  });\n};\n"
      },
      {
        "id": "storage-local-storage",
        "group": "storage",
        "name": "Local Storage",
        "emoji": "üóÑÔ∏è",
        "code": "export const setLocalStorage = <T>(key: string, value: T): void => {\n  if (typeof window === 'undefined') return;\n\n  try {\n    localStorage.setItem(key, JSON.stringify(value));\n  } catch (error) {\n    console.error(`Error setting localStorage key \"${key}\":`, error);\n  }\n};\n\nexport const getLocalStorage = <T>(key: string): T | null => {\n  if (typeof window === 'undefined') return null;\n\n  try {\n    const item = localStorage.getItem(key);\n    return item ? (JSON.parse(item) as T) : null;\n  } catch (error) {\n    console.error(`Error getting localStorage key \"${key}\":`, error);\n    return null;\n  }\n};\n\nexport const removeLocalStorage = (key: string): void => {\n  if (typeof window === 'undefined') return;\n\n  try {\n    localStorage.removeItem(key);\n  } catch (error) {\n    console.error(`Error removing localStorage key \"${key}\":`, error);\n  }\n};\n\nexport const clearLocalStorage = (): void => {\n  if (typeof window === 'undefined') return;\n\n  try {\n    localStorage.clear();\n  } catch (error) {\n    console.error('Error clearing localStorage:', error);\n  }\n};\n\nexport const LocalStorage = () => {\n  return { set: setLocalStorage, get: getLocalStorage, remove: removeLocalStorage, clear: clearLocalStorage };\n};\n"
      },
      {
        "id": "storage-session-storage",
        "group": "storage",
        "name": "Session Storage",
        "emoji": "üì¶",
        "code": "export const setSessionStorage = <T>(key: string, value: T): void => {\n  if (typeof window === 'undefined') return;\n\n  try {\n    sessionStorage.setItem(key, JSON.stringify(value));\n  } catch (error) {\n    console.error(`Error setting sessionStorage key \"${key}\":`, error);\n  }\n};\n\nexport const getSessionStorage = <T>(key: string): T | null => {\n  if (typeof window === 'undefined') return null;\n\n  try {\n    const item = sessionStorage.getItem(key);\n    return item ? (JSON.parse(item) as T) : null;\n  } catch (error) {\n    console.error(`Error getting sessionStorage key \"${key}\":`, error);\n    return null;\n  }\n};\n\nexport const removeSessionStorage = (key: string): void => {\n  if (typeof window === 'undefined') return;\n\n  try {\n    sessionStorage.removeItem(key);\n  } catch (error) {\n    console.error(`Error removing sessionStorage key \"${key}\":`, error);\n  }\n};\n\nexport const clearSessionStorage = (): void => {\n  if (typeof window === 'undefined') return;\n\n  try {\n    sessionStorage.clear();\n  } catch (error) {\n    console.error('Error clearing sessionStorage:', error);\n  }\n};\n\nexport const SessionStorage = () => {\n  return { set: setSessionStorage, get: getSessionStorage, remove: removeSessionStorage, clear: clearSessionStorage };\n};\n"
      }
    ]
  },
  "__N_SSG": true
}
