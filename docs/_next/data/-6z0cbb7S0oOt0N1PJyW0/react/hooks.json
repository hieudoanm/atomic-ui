{
  "pageProps": {
    "hooks": [
      {
        "id": "boolean-use-boolean",
        "group": "boolean",
        "name": "useBoolean",
        "emoji": "🔘",
        "code": "import { useCallback, useState } from 'react';\n\nimport type { Dispatch, SetStateAction } from 'react';\n\ntype UseBooleanReturn = {\n  value: boolean;\n  setValue: Dispatch<SetStateAction<boolean>>;\n  setTrue: () => void;\n  setFalse: () => void;\n  toggle: () => void;\n};\n\nexport const useBoolean = (defaultValue = false): UseBooleanReturn => {\n  if (typeof defaultValue !== 'boolean') {\n    throw new Error('defaultValue must be `true` or `false`');\n  }\n  const [value, setValue] = useState(defaultValue);\n\n  const setTrue = useCallback(() => {\n    setValue(true);\n  }, []);\n\n  const setFalse = useCallback(() => {\n    setValue(false);\n  }, []);\n\n  const toggle = useCallback(() => {\n    setValue((x) => !x);\n  }, []);\n\n  return { value, setValue, setTrue, setFalse, toggle };\n};\n"
      },
      {
        "id": "boolean-use-toggle",
        "group": "boolean",
        "name": "useToggle",
        "emoji": "🔀",
        "code": "import { Dispatch, SetStateAction, useCallback, useState } from 'react';\n\nexport const useToggle = (\n  defaultValue?: boolean\n): { value: boolean; setValue: Dispatch<SetStateAction<boolean>>; toggle: () => void } => {\n  const [value, setValue] = useState(!!defaultValue);\n\n  const toggle = useCallback(() => {\n    setValue((x) => !x);\n  }, []);\n\n  return { value, toggle, setValue };\n};\n"
      },
      {
        "id": "events-use-keyboard",
        "group": "events",
        "name": "useKeyboard",
        "emoji": "⌨️",
        "code": "import { useEffect, useState, useCallback } from 'react';\n\ninterface UseKeyboardOptions {\n  onKeyDown?: (event: KeyboardEvent) => void;\n  onKeyUp?: (event: KeyboardEvent) => void;\n  onKeyPress?: (event: KeyboardEvent) => void; // Note: keypress is deprecated but included if needed\n}\n\nexport const useKeyboard = ({ onKeyDown, onKeyUp, onKeyPress }: UseKeyboardOptions = {}) => {\n  const [pressedKeys, setPressedKeys] = useState<Set<string>>(new Set());\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      setPressedKeys((prev) => {\n        if (!prev.has(event.key)) {\n          const newSet = new Set(prev);\n          newSet.add(event.key);\n          return newSet;\n        }\n        return prev;\n      });\n      onKeyDown?.(event);\n    },\n    [onKeyDown]\n  );\n\n  const handleKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      setPressedKeys((prev) => {\n        if (prev.has(event.key)) {\n          const newSet = new Set(prev);\n          newSet.delete(event.key);\n          return newSet;\n        }\n        return prev;\n      });\n      onKeyUp?.(event);\n    },\n    [onKeyUp]\n  );\n\n  const handleKeyPress = useCallback(\n    (event: KeyboardEvent) => {\n      onKeyPress?.(event);\n    },\n    [onKeyPress]\n  );\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n    if (onKeyPress) {\n      window.addEventListener('keypress', handleKeyPress);\n    }\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n      if (onKeyPress) {\n        window.removeEventListener('keypress', handleKeyPress);\n      }\n    };\n  }, [handleKeyDown, handleKeyUp, handleKeyPress, onKeyPress]);\n\n  return {\n    pressedKeys, // Set of currently pressed keys\n  };\n};\n"
      },
      {
        "id": "events-use-media-query",
        "group": "events",
        "name": "useMediaQuery",
        "emoji": "🖼️",
        "code": "import { useState, useEffect } from 'react';\n\nexport const useMediaQuery = (query: string): boolean => {\n  const [matches, setMatches] = useState(() => window.matchMedia(query).matches);\n\n  useEffect(() => {\n    const media = window.matchMedia(query);\n    const listener = () => setMatches(media.matches);\n\n    media.addEventListener('change', listener);\n    return () => media.removeEventListener('change', listener);\n  }, [query]);\n\n  return matches;\n};\n"
      },
      {
        "id": "events-use-resize",
        "group": "events",
        "name": "useResize",
        "emoji": "📏",
        "code": "import { useState, useEffect } from 'react';\n\ninterface WindowSize {\n  width: number;\n  height: number;\n}\n\nexport const useWindowResize = (): WindowSize => {\n  const [size, setSize] = useState<WindowSize>({\n    width: window.innerWidth,\n    height: window.innerHeight,\n  });\n\n  useEffect(() => {\n    const handleResize = () => {\n      setSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    // Call handler right away so state gets updated with initial size\n    handleResize();\n\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return size;\n};\n"
      },
      {
        "id": "events-use-scroll",
        "group": "events",
        "name": "useScroll",
        "emoji": "🖱️",
        "code": "import { useState, useEffect } from 'react';\n\ninterface ScrollPosition {\n  scrollX: number;\n  scrollY: number;\n}\n\nexport const useScroll = (): ScrollPosition => {\n  const [scrollPos, setScrollPos] = useState<ScrollPosition>({\n    scrollX: window.scrollX,\n    scrollY: window.scrollY,\n  });\n\n  useEffect(() => {\n    const handleScroll = () => {\n      setScrollPos({\n        scrollX: window.scrollX,\n        scrollY: window.scrollY,\n      });\n    };\n\n    window.addEventListener('scroll', handleScroll, { passive: true });\n\n    // Optional: update on mount in case scroll position changed before hook\n    handleScroll();\n\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  return scrollPos;\n};\n"
      },
      {
        "id": "info-use-battery",
        "group": "info",
        "name": "useBattery",
        "emoji": "🔋",
        "code": "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { useEffect, useState } from 'react';\n\ninterface BatteryManager extends EventTarget {\n  charging: boolean;\n  chargingTime: number; // seconds until fully charged, or 0 if fully charged\n  dischargingTime: number; // seconds until fully discharged, or Infinity if charging\n  level: number; // battery level between 0 (empty) and 1 (full)\n\n  // Events\n  onchargingchange: ((this: BatteryManager, ev: Event) => any) | null;\n  onchargingtimechange: ((this: BatteryManager, ev: Event) => any) | null;\n  ondischargingtimechange: ((this: BatteryManager, ev: Event) => any) | null;\n  onlevelchange: ((this: BatteryManager, ev: Event) => any) | void;\n}\n\ninterface BatteryStatus {\n  charging: boolean;\n  level: number; // 0 to 1\n  chargingTime: number; // seconds\n  dischargingTime: number; // seconds\n}\n\nexport function useBatteryStatus() {\n  const [battery, setBattery] = useState<BatteryStatus | null>(null);\n\n  useEffect(() => {\n    let batteryManager: BatteryManager | null = null;\n\n    const updateBattery = (batt: BatteryManager) => {\n      setBattery({\n        charging: batt.charging,\n        level: batt.level,\n        chargingTime: batt.chargingTime,\n        dischargingTime: batt.dischargingTime,\n      });\n    };\n\n    (navigator as any).getBattery?.().then((batt: BatteryManager) => {\n      batteryManager = batt;\n      updateBattery(batt);\n\n      batt.addEventListener('chargingchange', () => updateBattery(batt));\n      batt.addEventListener('levelchange', () => updateBattery(batt));\n      batt.addEventListener('chargingtimechange', () => updateBattery(batt));\n      batt.addEventListener('dischargingtimechange', () => updateBattery(batt));\n    });\n\n    return () => {\n      if (!batteryManager) return;\n      batteryManager.removeEventListener('chargingchange', () => updateBattery(batteryManager!));\n      batteryManager.removeEventListener('levelchange', () => updateBattery(batteryManager!));\n      batteryManager.removeEventListener('chargingtimechange', () => updateBattery(batteryManager!));\n      batteryManager.removeEventListener('dischargingtimechange', () => updateBattery(batteryManager!));\n    };\n  }, []);\n\n  return battery;\n}\n"
      },
      {
        "id": "info-use-browser",
        "group": "info",
        "name": "useBrowser",
        "emoji": "🌐",
        "code": "import { useState, useEffect } from 'react';\n\ninterface BrowserInfo {\n  name: string;\n  version: string;\n  userAgent: string;\n}\n\nexport const useBrowser = (): BrowserInfo => {\n  const [info, setInfo] = useState<BrowserInfo>({\n    name: 'unknown',\n    version: '',\n    userAgent: navigator.userAgent,\n  });\n\n  useEffect(() => {\n    const ua = navigator.userAgent;\n\n    let name = 'unknown';\n    let version = '';\n\n    if (/firefox\\/(\\d+)/i.test(ua)) {\n      name = 'Firefox';\n      version = ua.match(/firefox\\/(\\d+)/i)?.[1] ?? '';\n    } else if (/chrome\\/(\\d+)/i.test(ua) && !/edg/i.test(ua)) {\n      name = 'Chrome';\n      version = ua.match(/chrome\\/(\\d+)/i)?.[1] ?? '';\n    } else if (/safari\\/(\\d+)/i.test(ua) && !/chrome/i.test(ua)) {\n      name = 'Safari';\n      version = ua.match(/version\\/(\\d+)/i)?.[1] ?? '';\n    } else if (/edg\\/(\\d+)/i.test(ua)) {\n      name = 'Edge';\n      version = ua.match(/edg\\/(\\d+)/i)?.[1] ?? '';\n    } else if (/opera\\/(\\d+)/i.test(ua)) {\n      name = 'Opera';\n      version = ua.match(/opera\\/(\\d+)/i)?.[1] ?? '';\n    }\n\n    setInfo({\n      name,\n      version,\n      userAgent: ua,\n    });\n  }, []);\n\n  return info;\n};\n"
      },
      {
        "id": "info-use-language",
        "group": "info",
        "name": "useLanguage",
        "emoji": "🈯",
        "code": "import { useState, useEffect } from 'react';\n\nexport const useLanguage = (): string => {\n  const [language, setLanguage] = useState<string>(navigator.language || 'en');\n\n  useEffect(() => {\n    setLanguage(navigator.language);\n  }, [navigator.language]);\n\n  return language;\n};\n"
      },
      {
        "id": "info-use-screen",
        "group": "info",
        "name": "useScreen",
        "emoji": "🖥️",
        "code": "import { useState, useEffect } from 'react';\n\ninterface ScreenSize {\n  width: number;\n  height: number;\n}\n\nexport const useScreen = (): ScreenSize => {\n  const [size, setSize] = useState<ScreenSize>({\n    width: window.innerWidth,\n    height: window.innerHeight,\n  });\n\n  useEffect(() => {\n    const onResize = () => setSize({ width: window.innerWidth, height: window.innerHeight });\n\n    window.addEventListener('resize', onResize);\n\n    return () => window.removeEventListener('resize', onResize);\n  }, []);\n\n  return size;\n};\n"
      },
      {
        "id": "navigator-use-clipboard",
        "group": "navigator",
        "name": "useClipboard",
        "emoji": "📋",
        "code": "import { useCallback, useState } from 'react';\n\ntype ClipboardState = {\n  copiedText: string;\n  error: string | null;\n  isSupported: boolean;\n  copy: (text: string) => Promise<boolean>;\n  read: () => Promise<string>;\n};\n\nexport const useClipboard = (): ClipboardState => {\n  const [copiedText, setCopiedText] = useState('');\n  const [error, setError] = useState<string | null>(null);\n\n  const isSupported = !!navigator?.clipboard;\n\n  const copy = useCallback(\n    async (text: string) => {\n      if (!isSupported) {\n        setError('Clipboard API not supported');\n        return false;\n      }\n\n      try {\n        await navigator.clipboard.writeText(text);\n        setCopiedText(text);\n        setError(null);\n        return true;\n      } catch (error) {\n        setError((error as Error).message);\n        return false;\n      }\n    },\n    [isSupported]\n  );\n\n  const read = useCallback(async () => {\n    if (!isSupported) {\n      setError('Clipboard API not supported');\n      return '';\n    }\n\n    try {\n      const text = await navigator.clipboard.readText();\n      setCopiedText(text);\n      setError(null);\n      return text;\n    } catch (error) {\n      setError((error as Error).message);\n      return '';\n    }\n  }, [isSupported]);\n\n  return {\n    copiedText,\n    error,\n    isSupported,\n    copy,\n    read,\n  };\n};\n"
      },
      {
        "id": "navigator-use-geolocation",
        "group": "navigator",
        "name": "useGeolocation",
        "emoji": "📍",
        "code": "import { useEffect, useState } from 'react';\n\ntype GeolocationState = {\n  coords: GeolocationCoordinates | null;\n  timestamp: number | null;\n  error: Error | GeolocationPositionError | null;\n};\n\nexport const useGeolocation = (watch: boolean = false, options?: PositionOptions) => {\n  const [state, setState] = useState<GeolocationState>({\n    coords: null,\n    timestamp: null,\n    error: null,\n  });\n\n  useEffect(() => {\n    if (!navigator.geolocation) {\n      setState((s) => ({ ...s, error: new Error('Geolocation is not supported') }));\n      return;\n    }\n\n    const onSuccess = (pos: GeolocationPosition) => {\n      setState({\n        coords: pos.coords,\n        timestamp: pos.timestamp,\n        error: null,\n      });\n    };\n\n    const onError = (err: GeolocationPositionError) => {\n      setState((s) => ({ ...s, error: err }));\n    };\n\n    let watchId: number;\n\n    if (watch) {\n      watchId = navigator.geolocation.watchPosition(onSuccess, onError, options);\n    } else {\n      navigator.geolocation.getCurrentPosition(onSuccess, onError, options);\n    }\n\n    return () => {\n      if (watch && watchId !== undefined) {\n        navigator.geolocation.clearWatch(watchId);\n      }\n    };\n  }, [watch, options]);\n\n  return state;\n};\n"
      },
      {
        "id": "network-use-online",
        "group": "network",
        "name": "useOnline",
        "emoji": "📶",
        "code": "import { useEffect, useState } from 'react';\n\nexport const useOnline = (): boolean => {\n  const [isOnline, setIsOnline] = useState<boolean>(navigator.onLine);\n\n  useEffect(() => {\n    const updateOnline = () => setIsOnline(true);\n    const updateOffline = () => setIsOnline(false);\n\n    window.addEventListener('online', updateOnline);\n    window.addEventListener('offline', updateOffline);\n\n    return () => {\n      window.removeEventListener('online', updateOnline);\n      window.removeEventListener('offline', updateOffline);\n    };\n  }, []);\n\n  return isOnline;\n};\n"
      },
      {
        "id": "network-use-fetch",
        "group": "network",
        "name": "useFetch",
        "emoji": "🛰️",
        "code": "import { useState, useEffect } from 'react';\n\ntype FetchState<T> = {\n  data: T | null;\n  loading: boolean;\n  error: Error | null;\n};\n\nexport function useFetch<T = unknown>(url: string, options?: RequestInit) {\n  const [state, setState] = useState<FetchState<T>>({\n    data: null,\n    loading: true,\n    error: null,\n  });\n\n  useEffect(() => {\n    const controller = new AbortController();\n    const fetchData = async () => {\n      setState({ data: null, loading: true, error: null });\n\n      try {\n        const response = await fetch(url, {\n          ...options,\n          signal: controller.signal,\n        });\n\n        if (!response.ok) throw new Error(`HTTP error: ${response.status}`);\n\n        const data = (await response.json()) as T;\n        setState({ data, loading: false, error: null });\n      } catch (error) {\n        if ((error as Error).name !== 'AbortError') {\n          setState({ data: null, loading: false, error: error as Error });\n        }\n      }\n    };\n\n    fetchData();\n\n    return () => controller.abort();\n  }, [url, JSON.stringify(options)]); // re-run if URL or options change\n\n  return state;\n}\n"
      },
      {
        "id": "ssr-use-isomorphic-layout-effect",
        "group": "ssr",
        "name": "useIsomorphicLayoutEffect",
        "emoji": "⚙️",
        "code": "import { useEffect, useLayoutEffect } from 'react';\n\nexport const useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect;\n"
      },
      {
        "id": "storage-use-local-storage",
        "group": "storage",
        "name": "useLocalStorage",
        "emoji": "💾",
        "code": "import { useEffect, useState } from 'react';\n\nexport const useLocalStorage = (key: string, initialValue: string) => {\n  // Get from local storage then parse stored json or return initial value\n  const readValue = () => {\n    if (typeof window === 'undefined') return initialValue;\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.warn(`Error reading localStorage key “${key}”:`, error);\n      return initialValue;\n    }\n  };\n\n  const [storedValue, setStoredValue] = useState(readValue);\n\n  // Update localStorage when the state changes\n  useEffect(() => {\n    if (typeof window === 'undefined') return;\n    try {\n      window.localStorage.setItem(key, JSON.stringify(storedValue));\n    } catch (error) {\n      console.warn(`Error setting localStorage key “${key}”:`, error);\n    }\n  }, [key, storedValue]);\n\n  return [storedValue, setStoredValue];\n};\n"
      },
      {
        "id": "storage-use-session-storage",
        "group": "storage",
        "name": "useSessionStorage",
        "emoji": "🗂️",
        "code": "import { useEffect, useState } from 'react';\n\nexport const useSessionStorage = (key: string, initialValue: string) => {\n  // Get from session storage then parse stored json or return initial value\n  const readValue = () => {\n    if (typeof window === 'undefined') return initialValue;\n    try {\n      const item = window.sessionStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.warn(`Error reading sessionStorage key “${key}”:`, error);\n      return initialValue;\n    }\n  };\n\n  const [storedValue, setStoredValue] = useState(readValue);\n\n  // Update sessionStorage when the state changes\n  useEffect(() => {\n    if (typeof window === 'undefined') return;\n    try {\n      window.sessionStorage.setItem(key, JSON.stringify(storedValue));\n    } catch (error) {\n      console.warn(`Error setting sessionStorage key “${key}”:`, error);\n    }\n  }, [key, storedValue]);\n\n  return [storedValue, setStoredValue];\n};\n"
      },
      {
        "id": "time-use-countdown",
        "group": "time",
        "name": "useCountdown",
        "emoji": "⏳",
        "code": "import { useCallback, useEffect, useRef, useState } from 'react';\n\ninterface UseCountdownOptions {\n  interval?: number; // tick interval in ms, default 1000\n  onComplete?: () => void; // called when countdown reaches 0\n}\n\nexport function useCountdown(initialSeconds: number, options?: UseCountdownOptions) {\n  const { interval = 1000, onComplete } = options || {};\n  const [secondsLeft, setSecondsLeft] = useState(initialSeconds);\n  const timerRef = useRef<NodeJS.Timeout | null>(null);\n  const isPausedRef = useRef(true);\n\n  const clearTimer = useCallback(() => {\n    if (timerRef.current) {\n      clearInterval(timerRef.current);\n      timerRef.current = null;\n    }\n  }, []);\n\n  const tick = useCallback(() => {\n    setSecondsLeft((prev) => {\n      if (prev <= 1) {\n        clearTimer();\n        isPausedRef.current = true;\n        if (onComplete) onComplete();\n        return 0;\n      }\n      return prev - 1;\n    });\n  }, [clearTimer, onComplete]);\n\n  const start = useCallback(() => {\n    clearTimer();\n    isPausedRef.current = false;\n    setSecondsLeft(initialSeconds);\n    timerRef.current = setInterval(tick, interval);\n  }, [clearTimer, initialSeconds, interval, tick]);\n\n  const stop = useCallback(() => {\n    clearTimer();\n    isPausedRef.current = true;\n  }, [clearTimer]);\n\n  const pause = useCallback(() => {\n    clearTimer();\n    isPausedRef.current = true;\n  }, [clearTimer]);\n\n  const resume = useCallback(() => {\n    if (secondsLeft > 0 && isPausedRef.current) {\n      isPausedRef.current = false;\n      clearTimer();\n      timerRef.current = setInterval(tick, interval);\n    }\n  }, [secondsLeft, clearTimer, interval, tick]);\n\n  const reset = useCallback(() => {\n    clearTimer();\n    isPausedRef.current = true;\n    setSecondsLeft(initialSeconds);\n  }, [clearTimer, initialSeconds]);\n\n  useEffect(() => {\n    return () => clearTimer();\n  }, [clearTimer]);\n\n  return { secondsLeft, start, stop, pause, resume, reset };\n}\n"
      },
      {
        "id": "time-use-interval",
        "group": "time",
        "name": "useInterval",
        "emoji": "⏱️",
        "code": "import { useEffect, useRef } from 'react';\n\nexport const useInterval = (callback: () => void, delay: number | null): void => {\n  const savedCallback = useRef<() => void>(null);\n\n  // Store the latest callback\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval\n  useEffect(() => {\n    if (delay === null || delay === undefined) return;\n\n    const tick = () => {\n      savedCallback.current?.();\n    };\n\n    const id = setInterval(tick, delay);\n    return () => clearInterval(id);\n  }, [delay]);\n};\n"
      },
      {
        "id": "time-use-timeout",
        "group": "time",
        "name": "useTimeout",
        "emoji": "⏳",
        "code": "import { useEffect, useRef } from 'react';\n\nexport const useTimeout = (callback: () => void, delay: number | null): void => {\n  const savedCallback = useRef<() => void>(null);\n\n  // Remember the latest callback\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    if (typeof delay !== 'number') return;\n\n    const id = setTimeout(() => {\n      savedCallback.current?.();\n    }, delay);\n\n    return () => clearTimeout(id);\n  }, [delay]);\n};\n"
      }
    ]
  },
  "__N_SSG": true
}
