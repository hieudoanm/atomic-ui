{
  "pageProps": {
    "charts": [
      {
        "id": "area",
        "name": "area",
        "code": "<div\n  className=\"w-full max-w-md rounded-lg border border-neutral-200 p-4 shadow dark:border-neutral-800 dark:shadow-neutral-100/10\">\n  <canvas id=\"areaChart\" width=\"400\" height=\"200\" className=\"h-auto w-full\" />\n</div>\n<!-- Script -->\n<script type=\"text/javascript\">\n  const canvas = document.getElementById('areaChart');\n  if (!canvas) return;\n  const ctx = canvas.getContext('2d');\n  if (!ctx) return;\n\n  const width = canvas.width;\n  const height = canvas.height;\n\n  ctx.clearRect(0, 0, width, height);\n\n  const padding = 40;\n  const bottomPadding = 60;\n  const leftPadding = 60;\n\n  const chartWidth = width - leftPadding - padding;\n  const chartHeight = height - bottomPadding - padding;\n  const maxValue = Math.max(...data);\n  const minValue = 0;\n\n  const getX = (i) => leftPadding + (chartWidth / (data.length - 1)) * i;\n  const getY = (val) => padding + ((maxValue - val) / (maxValue - minValue)) * chartHeight;\n\n  // Grid\n  ctx.strokeStyle = '#e5e7eb';\n  ctx.lineWidth = 1;\n\n  for (let i = 0; i <= 5; i++) {\n    const y = padding + (chartHeight / 5) * i;\n    ctx.beginPath();\n    ctx.moveTo(leftPadding, y);\n    ctx.lineTo(width - padding, y);\n    ctx.stroke();\n  }\n\n  for (let i = 0; i < labels.length; i++) {\n    const x = getX(i);\n    ctx.beginPath();\n    ctx.moveTo(x, padding);\n    ctx.lineTo(x, height - bottomPadding);\n    ctx.stroke();\n  }\n\n  // Y axis labels\n  ctx.fillStyle = '#374151';\n  ctx.font = '12px sans-serif';\n  ctx.textAlign = 'right';\n  ctx.textBaseline = 'middle';\n  for (let i = 0; i <= 5; i++) {\n    const y = padding + (chartHeight / 5) * i;\n    const value = maxValue - ((maxValue - minValue) / 5) * i;\n    ctx.fillText(value.toFixed(0), leftPadding - 8, y);\n  }\n\n  // X axis labels\n  ctx.textAlign = 'center';\n  ctx.textBaseline = 'top';\n  for (let i = 0; i < labels.length; i++) {\n    ctx.fillText(labels[i], getX(i), height - bottomPadding + 6);\n  }\n\n  // Axes\n  ctx.strokeStyle = '#9ca3af';\n  ctx.lineWidth = 2;\n  ctx.beginPath();\n  ctx.moveTo(leftPadding, padding);\n  ctx.lineTo(leftPadding, height - bottomPadding);\n  ctx.stroke();\n\n  ctx.beginPath();\n  ctx.moveTo(leftPadding, height - bottomPadding);\n  ctx.lineTo(width - padding, height - bottomPadding);\n  ctx.stroke();\n\n  // Area Fill (straight)\n  ctx.beginPath();\n  ctx.moveTo(getX(0), height - bottomPadding);\n  for (let i = 0; i < data.length; i++) {\n    ctx.lineTo(getX(i), getY(data[i]));\n  }\n  ctx.lineTo(getX(data.length - 1), height - bottomPadding);\n  ctx.closePath();\n  ctx.fillStyle = 'rgba(59, 130, 246, 0.3)';\n  ctx.fill();\n\n  // Curved Line\n  ctx.beginPath();\n  ctx.moveTo(getX(0), getY(data[0]));\n  for (let i = 0; i < data.length - 1; i++) {\n    const xMid = (getX(i) + getX(i + 1)) / 2;\n    const yMid = (getY(data[i]) + getY(data[i + 1])) / 2;\n    ctx.quadraticCurveTo(getX(i), getY(data[i]), xMid, yMid);\n  }\n  ctx.quadraticCurveTo(\n    getX(data.length - 1),\n    getY(data[data.length - 1]),\n    getX(data.length - 1),\n    getY(data[data.length - 1])\n  );\n  ctx.strokeStyle = '#3b82f6';\n  ctx.lineWidth = 2;\n  ctx.stroke();\n\n  // Axis titles\n  ctx.fillStyle = '#374151';\n  ctx.font = '14px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillText('Month', width / 2, height - 10);\n\n  ctx.save();\n  ctx.translate(16, height / 2);\n  ctx.rotate(-Math.PI / 2);\n  ctx.fillText('Revenue ($)', 0, 0);\n  ctx.restore();\n\n  // Legend\n  ctx.fillStyle = '#3b82f6';\n  ctx.fillRect(width / 2 - 30, 0, 12, 12);\n  ctx.fillStyle = '#374151';\n  ctx.font = '12px sans-serif';\n  ctx.textAlign = 'left';\n  ctx.fillText('Revenue', width / 2 - 12, 6);\n</script>\n"
      },
      {
        "id": "bar",
        "name": "bar",
        "code": "<div\n  className=\"w-full max-w-md rounded-lg border border-neutral-200 p-4 shadow dark:border-neutral-800 dark:shadow-neutral-100/10\">\n  <canvas id=\"barChart\" width=\"400\" height=\"200\" className=\"h-auto w-full\" />\n</div>\n<!-- Script -->\n<script type=\"text/javascript\">\n  const canvas = document.getElementById('barChart');\n  if (!canvas) return;\n  const ctx = canvas.getContext('2d');\n  if (!ctx) return;\n\n  const width = canvas.width;\n  const height = canvas.height;\n  ctx.clearRect(0, 0, width, height);\n\n  const padding = 40;\n  const bottomPadding = 60;\n  const leftPadding = 60;\n\n  const chartWidth = width - leftPadding - padding;\n  const chartHeight = height - bottomPadding - padding;\n\n  const maxValue = Math.max(...data);\n  const minValue = 0;\n\n  // Draw grid lines (horizontal)\n  ctx.strokeStyle = '#e5e7eb'; // neutral-200\n  ctx.lineWidth = 1;\n\n  const ySteps = 5;\n  for (let i = 0; i <= ySteps; i++) {\n    const y = padding + (chartHeight / ySteps) * i;\n    ctx.beginPath();\n    ctx.moveTo(leftPadding, y);\n    ctx.lineTo(width - padding, y);\n    ctx.stroke();\n  }\n\n  // Draw grid lines (vertical)\n  const xSteps = labels.length;\n  for (let i = 0; i < xSteps; i++) {\n    const x = leftPadding + (chartWidth / xSteps) * i + chartWidth / xSteps / 2;\n    ctx.beginPath();\n    ctx.moveTo(x, padding);\n    ctx.lineTo(x, height - bottomPadding);\n    ctx.stroke();\n  }\n\n  // Draw Y axis labels\n  ctx.fillStyle = '#374151'; // neutral-700\n  ctx.font = '12px sans-serif';\n  ctx.textAlign = 'right';\n  ctx.textBaseline = 'middle';\n  for (let i = 0; i <= ySteps; i++) {\n    const y = padding + (chartHeight / ySteps) * i;\n    const value = maxValue - ((maxValue - minValue) / ySteps) * i;\n    ctx.fillText(value.toFixed(0), leftPadding - 8, y);\n  }\n\n  // Draw X axis labels\n  ctx.textAlign = 'center';\n  ctx.textBaseline = 'top';\n  for (let i = 0; i < labels.length; i++) {\n    const x = leftPadding + (chartWidth / xSteps) * i + chartWidth / xSteps / 2;\n    ctx.fillText(labels[i], x, height - bottomPadding + 6);\n  }\n\n  // Draw axes\n  ctx.strokeStyle = '#9ca3af'; // neutral-400\n  ctx.lineWidth = 2;\n\n  // Y axis\n  ctx.beginPath();\n  ctx.moveTo(leftPadding, padding);\n  ctx.lineTo(leftPadding, height - bottomPadding);\n  ctx.stroke();\n\n  // X axis\n  ctx.beginPath();\n  ctx.moveTo(leftPadding, height - bottomPadding);\n  ctx.lineTo(width - padding, height - bottomPadding);\n  ctx.stroke();\n\n  // Draw bars\n  const barWidth = chartWidth / xSteps / 2; // half of the segment width\n  ctx.fillStyle = '#3b82f6'; // blue-500\n  for (let i = 0; i < data.length; i++) {\n    const x = leftPadding + (chartWidth / xSteps) * i + chartWidth / xSteps / 2 - barWidth / 2;\n    const y = padding + ((maxValue - data[i]) / (maxValue - minValue)) * chartHeight;\n    const barHeight = height - bottomPadding - y;\n\n    ctx.fillRect(x, y, barWidth, barHeight);\n  }\n\n  // Axis names\n  ctx.fillStyle = '#374151'; // neutral-700\n  ctx.font = '14px sans-serif';\n  ctx.textAlign = 'center';\n\n  // X-axis name\n  ctx.fillText('Month', width / 2, height - 10);\n\n  // Y-axis name\n  ctx.save();\n  ctx.translate(16, height / 2);\n  ctx.rotate(-Math.PI / 2);\n  ctx.fillText('Revenue ($)', 0, 0);\n  ctx.restore();\n\n  // Legend\n  const legendX = width / 2 - 16;\n  const legendY = 0;\n\n  ctx.fillStyle = '#3b82f6';\n  ctx.fillRect(legendX, legendY, 12, 12);\n\n  ctx.fillStyle = '#374151';\n  ctx.font = '12px sans-serif';\n  ctx.textAlign = 'left';\n  ctx.textBaseline = 'middle';\n  ctx.fillText('Revenue', legendX + 16, legendY + 6);\n</script>\n"
      },
      {
        "id": "bubble",
        "name": "bubble",
        "code": "<div\n  className=\"w-full max-w-md rounded-lg border border-neutral-200 p-4 shadow dark:border-neutral-800 dark:shadow-neutral-100/10\">\n  <canvas id=\"bubbleChart\" width=\"400\" height=\"200\" className=\"h-auto w-full\" />\n</div>\n<!-- Script -->\n<script type=\"text/javascript\">\n  const canvas = document.getElementById('bubbleChart');\n  if (!canvas) return;\n  const ctx = canvas.getContext('2d');\n  if (!ctx) return;\n\n  const width = canvas.width;\n  const height = canvas.height;\n  ctx.clearRect(0, 0, width, height);\n\n  const padding = 40;\n  const bottomPadding = 60;\n  const leftPadding = 60;\n\n  const chartWidth = width - leftPadding - padding;\n  const chartHeight = height - bottomPadding - padding;\n\n  // Find min/max for scaling\n  const xValues = data.map((d) => d.x);\n  const yValues = data.map((d) => d.y);\n\n  const xMin = Math.min(...xValues);\n  const xMax = Math.max(...xValues);\n  const yMin = Math.min(...yValues);\n  const yMax = Math.max(...yValues);\n\n  // Draw horizontal grid lines and Y labels\n  ctx.strokeStyle = '#e5e7eb'; // neutral-200\n  ctx.lineWidth = 1;\n\n  const ySteps = yLabels.length - 1 || 5;\n  for (let i = 0; i <= ySteps; i++) {\n    const y = padding + (chartHeight / ySteps) * i;\n    ctx.beginPath();\n    ctx.moveTo(leftPadding, y);\n    ctx.lineTo(width - padding, y);\n    ctx.stroke();\n\n    // Y labels\n    ctx.fillStyle = '#374151'; // neutral-700\n    ctx.font = '12px sans-serif';\n    ctx.textAlign = 'right';\n    ctx.textBaseline = 'middle';\n    const label = yLabels[ySteps - i] || (yMin + ((yMax - yMin) / ySteps) * (ySteps - i)).toFixed(0);\n    ctx.fillText(label.toString(), leftPadding - 8, y);\n  }\n\n  // Draw vertical grid lines and X labels\n  const xSteps = xLabels.length - 1 || 5;\n  for (let i = 0; i <= xSteps; i++) {\n    const x = leftPadding + (chartWidth / xSteps) * i;\n    ctx.beginPath();\n    ctx.moveTo(x, padding);\n    ctx.lineTo(x, height - bottomPadding);\n    ctx.stroke();\n\n    // X labels\n    ctx.fillStyle = '#374151';\n    ctx.font = '12px sans-serif';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'top';\n    const label = xLabels[i] || (xMin + ((xMax - xMin) / xSteps) * i).toFixed(0);\n    ctx.fillText(label.toString(), x, height - bottomPadding + 6);\n  }\n\n  // Draw axes\n  ctx.strokeStyle = '#9ca3af'; // neutral-400\n  ctx.lineWidth = 2;\n\n  // Y axis\n  ctx.beginPath();\n  ctx.moveTo(leftPadding, padding);\n  ctx.lineTo(leftPadding, height - bottomPadding);\n  ctx.stroke();\n\n  // X axis\n  ctx.beginPath();\n  ctx.moveTo(leftPadding, height - bottomPadding);\n  ctx.lineTo(width - padding, height - bottomPadding);\n  ctx.stroke();\n\n  // Plot bubbles\n  data.forEach(({ x, y, r }) => {\n    // Calculate position\n    const xPos = leftPadding + ((x - xMin) / (xMax - xMin)) * chartWidth;\n    const yPos = padding + ((yMax - y) / (yMax - yMin)) * chartHeight;\n\n    ctx.beginPath();\n    ctx.fillStyle = 'rgba(59, 130, 246, 0.6)'; // blue-500 with opacity\n    ctx.strokeStyle = '#3b82f6'; // blue-500\n    ctx.lineWidth = 1;\n    ctx.arc(xPos, yPos, r, 0, 2 * Math.PI);\n    ctx.fill();\n    ctx.stroke();\n  });\n\n  // Axis names\n  ctx.fillStyle = '#374151'; // neutral-700\n  ctx.font = '14px sans-serif';\n  ctx.textAlign = 'center';\n\n  // X-axis name\n  ctx.fillText(xName, width / 2, height - 10);\n\n  // Y-axis name\n  ctx.save();\n  ctx.translate(16, height / 2);\n  ctx.rotate(-Math.PI / 2);\n  ctx.fillText(yName, 0, 0);\n  ctx.restore();\n\n  // Legend (single bubble)\n  const legendX = width / 2 - 16;\n  const legendY = 0;\n  const legendRadius = 8;\n\n  ctx.beginPath();\n  ctx.fillStyle = 'rgba(59, 130, 246, 0.6)';\n  ctx.strokeStyle = '#3b82f6';\n  ctx.lineWidth = 1;\n  ctx.arc(legendX + legendRadius, legendY + legendRadius, legendRadius, 0, 2 * Math.PI);\n  ctx.fill();\n  ctx.stroke();\n\n  ctx.fillStyle = '#374151';\n  ctx.font = '12px sans-serif';\n  ctx.textAlign = 'left';\n  ctx.textBaseline = 'middle';\n  ctx.fillText('Bubble Size = Radius', legendX + legendRadius * 2 + 8, legendY + legendRadius);\n</script>\n"
      },
      {
        "id": "doughnut",
        "name": "doughnut",
        "code": "<div\n  className=\"w-full max-w-md rounded-lg border border-neutral-200 p-4 shadow dark:border-neutral-800 dark:shadow-neutral-100/10\">\n  <canvas id=\"doughnutChart\" width=\"400\" height=\"200\" className=\"h-auto w-full\" />\n</div>\n<!-- Script -->\n<script type=\"text/javascript\">\n  // Default color palette if not provided\n  const defaultColors = [\n    '#3b82f6', // blue-500\n    '#ef4444', // red-500\n    '#f59e0b', // amber-500\n    '#10b981', // emerald-500\n    '#8b5cf6', // violet-500\n    '#ec4899', // pink-500\n    '#14b8a6', // teal-500\n  ];\n  const sliceColors = colors || defaultColors;\n  // Canvas\n  const canvas = document.getElementById('doughnutChart');\n  if (!canvas) return;\n  const ctx = canvas.getContext('2d');\n  if (!ctx) return;\n\n  const width = canvas.width;\n  const height = canvas.height;\n  const centerX = width / 2;\n  const centerY = height / 2;\n  const radius = Math.min(width, height) / 2 - 40;\n  const innerRadius = radius * 0.6; // hole size\n\n  ctx.clearRect(0, 0, width, height);\n\n  // Calculate total data sum\n  const total = data.reduce((acc, val) => acc + val, 0);\n\n  // Draw doughnut slices\n  let startAngle = -Math.PI / 2; // start at top\n\n  data.forEach((value, i) => {\n    const sliceAngle = (value / total) * 2 * Math.PI;\n    const endAngle = startAngle + sliceAngle;\n\n    // Draw slice\n    ctx.beginPath();\n    ctx.moveTo(centerX, centerY);\n    ctx.arc(centerX, centerY, radius, startAngle, endAngle);\n    ctx.closePath();\n\n    ctx.fillStyle = sliceColors[i % sliceColors.length];\n    ctx.fill();\n\n    startAngle = endAngle;\n  });\n\n  // Draw inner circle (hole)\n  ctx.beginPath();\n  ctx.fillStyle = '#fff'; // white hole background\n  ctx.moveTo(centerX, centerY);\n  ctx.arc(centerX, centerY, innerRadius, 0, 2 * Math.PI);\n  ctx.fill();\n\n  // Dark mode hole background\n  // Optional: You can switch fillStyle based on theme if you have a way to detect dark mode\n\n  // Draw legend\n  const legendX = width - 75;\n  let legendY = 20;\n  const boxSize = 16;\n  const gap = 8;\n\n  ctx.font = '14px sans-serif';\n  ctx.textAlign = 'left';\n  ctx.textBaseline = 'middle';\n\n  labels.forEach((label, i) => {\n    // Color box\n    ctx.fillStyle = sliceColors[i % sliceColors.length];\n    ctx.fillRect(legendX, legendY, boxSize, boxSize);\n\n    // Text\n    ctx.fillStyle = '#374151'; // neutral-700\n    ctx.fillText(label, legendX + boxSize + gap, legendY + boxSize / 2);\n\n    legendY += boxSize + gap;\n  });\n\n  // Draw chart title\n  ctx.fillStyle = '#374151';\n  ctx.font = '16px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillText(title, centerX, 20);\n</script>\n"
      },
      {
        "id": "line",
        "name": "line",
        "code": "<div\n  className=\"w-full max-w-md rounded-lg border border-neutral-200 p-4 shadow dark:border-neutral-800 dark:shadow-neutral-100/10\">\n  <canvas id=\"lineChart\" width=\"400\" height=\"200\" className=\"h-auto w-full\" />\n</div>\n<!-- Script -->\n<script type=\"text/javascript\">\n  const canvas = document.getElementById('lineChart');\n  if (!canvas) return;\n  const ctx = canvas.getContext('2d');\n  if (!ctx) return;\n\n  const width = canvas.width;\n  const height = canvas.height;\n  ctx.clearRect(0, 0, width, height);\n\n  const padding = 40;\n  const bottomPadding = 60;\n  const leftPadding = 60;\n\n  const maxValue = Math.max(...data);\n  const minValue = 0;\n  const chartHeight = height - bottomPadding - padding;\n  const chartWidth = width - leftPadding - padding;\n\n  // Draw grid lines\n  ctx.strokeStyle = '#e5e7eb'; // neutral-200\n  ctx.lineWidth = 1;\n\n  const ySteps = 5;\n  for (let i = 0; i <= ySteps; i++) {\n    const y = padding + (chartHeight / ySteps) * i;\n    ctx.beginPath();\n    ctx.moveTo(leftPadding, y);\n    ctx.lineTo(width - padding, y);\n    ctx.stroke();\n  }\n\n  const xSteps = labels.length;\n  for (let i = 0; i < xSteps; i++) {\n    const x = leftPadding + (chartWidth / (xSteps - 1)) * i;\n    ctx.beginPath();\n    ctx.moveTo(x, padding);\n    ctx.lineTo(x, height - bottomPadding);\n    ctx.stroke();\n  }\n\n  // Draw Y axis labels\n  ctx.fillStyle = '#374151'; // neutral-700\n  ctx.font = '12px sans-serif';\n  ctx.textAlign = 'right';\n  ctx.textBaseline = 'middle';\n  for (let i = 0; i <= ySteps; i++) {\n    const y = padding + (chartHeight / ySteps) * i;\n    const value = maxValue - ((maxValue - minValue) / ySteps) * i;\n    ctx.fillText(value.toFixed(0), leftPadding - 8, y);\n  }\n\n  // Draw X axis labels\n  ctx.textAlign = 'center';\n  ctx.textBaseline = 'top';\n  for (let i = 0; i < labels.length; i++) {\n    const x = leftPadding + (chartWidth / (labels.length - 1)) * i;\n    ctx.fillText(labels[i], x, height - bottomPadding + 6);\n  }\n\n  // Draw axes\n  ctx.strokeStyle = '#9ca3af'; // neutral-400\n  ctx.lineWidth = 2;\n\n  // Y axis\n  ctx.beginPath();\n  ctx.moveTo(leftPadding, padding);\n  ctx.lineTo(leftPadding, height - bottomPadding);\n  ctx.stroke();\n\n  // X axis\n  ctx.beginPath();\n  ctx.moveTo(leftPadding, height - bottomPadding);\n  ctx.lineTo(width - padding, height - bottomPadding);\n  ctx.stroke();\n\n  // Plot line\n  ctx.strokeStyle = '#3b82f6'; // blue-500\n  ctx.lineWidth = 2;\n  ctx.beginPath();\n  data.forEach((point, i) => {\n    const x = leftPadding + (chartWidth / (data.length - 1)) * i;\n    const y = padding + ((maxValue - point) / (maxValue - minValue)) * chartHeight;\n    if (i === 0) {\n      ctx.moveTo(x, y);\n    } else {\n      ctx.lineTo(x, y);\n    }\n  });\n  ctx.stroke();\n\n  // Axis names\n  ctx.fillStyle = '#374151'; // neutral-700\n  ctx.font = '14px sans-serif';\n  ctx.textAlign = 'center';\n\n  // X-axis name\n  ctx.fillText('Month', width / 2, height - 10);\n\n  // Y-axis name\n  ctx.save();\n  ctx.translate(16, height / 2);\n  ctx.rotate(-Math.PI / 2);\n  ctx.fillText('Revenue ($)', 0, 0);\n  ctx.restore();\n\n  // Legend\n  const legendX = width / 2 - 16;\n  const legendY = 0;\n\n  ctx.fillStyle = '#3b82f6'; // blue-500\n  ctx.fillRect(legendX, legendY, 12, 12);\n\n  ctx.fillStyle = '#374151'; // neutral-700\n  ctx.font = '12px sans-serif';\n  ctx.textAlign = 'left';\n  ctx.textBaseline = 'middle';\n  ctx.fillText('Revenue', legendX + 16, legendY + 6);\n</script>\n"
      },
      {
        "id": "polar",
        "name": "polar",
        "code": "<div\n  className=\"w-full max-w-md rounded-lg border border-neutral-200 p-4 shadow dark:border-neutral-800 dark:shadow-neutral-100/10\">\n  <canvas id=\"polarChart\" width=\"400\" height=\"200\" className=\"h-auto w-full\" />\n</div>\n<!-- Script -->\n<script type=\"text/javascript\">\n  const canvas = document.getElementById('polarChart');\n  if (!canvas) return;\n  const ctx = canvas.getContext('2d');\n  if (!ctx) return;\n\n  const width = canvas.width;\n  const height = canvas.height;\n  ctx.clearRect(0, 0, width, height);\n\n  const centerX = width / 2;\n  const centerY = height / 2;\n  const padding = 60;\n  const radius = Math.min(width, height) / 2 - padding;\n\n  const pointsCount = labels.length;\n  const angleStep = (2 * Math.PI) / pointsCount;\n\n  const scaleMax = maxValue ?? Math.max(...data, 1);\n  const scaleMin = 0;\n\n  // Draw concentric circles (grid)\n  ctx.strokeStyle = '#e5e7eb'; // neutral-200\n  ctx.lineWidth = 1;\n\n  const levels = 5;\n  for (let level = 1; level <= levels; level++) {\n    const r = (radius / levels) * level;\n    ctx.beginPath();\n    ctx.arc(centerX, centerY, r, 0, 2 * Math.PI);\n    ctx.stroke();\n  }\n\n  // Draw axis lines and labels\n  ctx.strokeStyle = '#9ca3af'; // neutral-400\n  ctx.fillStyle = '#374151'; // neutral-700\n  ctx.font = '12px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.textBaseline = 'middle';\n\n  for (let i = 0; i < pointsCount; i++) {\n    const angle = i * angleStep - Math.PI / 2;\n    const x = centerX + radius * Math.cos(angle);\n    const y = centerY + radius * Math.sin(angle);\n\n    // axis line\n    ctx.beginPath();\n    ctx.moveTo(centerX, centerY);\n    ctx.lineTo(x, y);\n    ctx.stroke();\n\n    // label (slightly outside the radius)\n    const labelX = centerX + (radius + 20) * Math.cos(angle);\n    const labelY = centerY + (radius + 20) * Math.sin(angle);\n    ctx.fillText(labels[i], labelX, labelY);\n  }\n\n  // Draw data sectors\n  const colors = ['#3b82f6', '#ef4444', '#f59e0b', '#10b981', '#8b5cf6', '#ec4899', '#22d3ee'];\n\n  for (let i = 0; i < pointsCount; i++) {\n    const valueRatio = (data[i] - scaleMin) / (scaleMax - scaleMin);\n    const r = radius * valueRatio;\n    const startAngle = i * angleStep - Math.PI / 2;\n    const endAngle = startAngle + angleStep;\n\n    ctx.beginPath();\n    ctx.moveTo(centerX, centerY);\n    ctx.arc(centerX, centerY, r, startAngle, endAngle);\n    ctx.closePath();\n    ctx.fillStyle = colors[i % colors.length] + 'cc'; // add transparency\n    ctx.fill();\n    ctx.strokeStyle = colors[i % colors.length];\n    ctx.lineWidth = 2;\n    ctx.stroke();\n  }\n\n  // Title\n  if (title) {\n    ctx.fillStyle = '#374151'; // neutral-700\n    ctx.font = '16px sans-serif';\n    ctx.textAlign = 'center';\n    ctx.fillText(title, centerX, padding / 2);\n  }\n\n  // Legend\n  const legendX = width - 140;\n  let legendY = 40;\n  const radiusLegend = 8;\n\n  ctx.font = '12px sans-serif';\n  ctx.textAlign = 'left';\n  ctx.textBaseline = 'middle';\n\n  for (let i = 0; i < pointsCount; i++) {\n    ctx.fillStyle = colors[i % colors.length];\n    ctx.beginPath();\n    ctx.arc(legendX + radiusLegend, legendY + radiusLegend, radiusLegend, 0, 2 * Math.PI);\n    ctx.fill();\n\n    ctx.fillStyle = '#374151'; // neutral-700\n    ctx.fillText(labels[i], legendX + radiusLegend * 2 + 8, legendY + radiusLegend);\n\n    legendY += 28;\n  }\n</script>\n"
      },
      {
        "id": "radar",
        "name": "radar",
        "code": "<div\n  className=\"w-full max-w-md rounded-lg border border-neutral-200 p-4 shadow dark:border-neutral-800 dark:shadow-neutral-100/10\">\n  <canvas id=\"radarChart\" width=\"400\" height=\"200\" className=\"h-auto w-full\" />\n</div>\n<!-- Script -->\n<script type=\"text/javascript\">\n  const canvas = document.getElementById('radarChart');\n  if (!canvas) return;\n  const ctx = canvas.getContext('2d');\n  if (!ctx) return;\n\n  const width = canvas.width;\n  const height = canvas.height;\n  ctx.clearRect(0, 0, width, height);\n\n  const centerX = width / 2;\n  const centerY = height / 2;\n  const padding = 60;\n  const radius = Math.min(width, height) / 2 - padding;\n\n  const pointsCount = labels.length;\n  const angleStep = (2 * Math.PI) / pointsCount;\n\n  const scaleMax = maxValue ?? Math.max(...data, 1);\n  const scaleMin = 0;\n\n  // Draw concentric polygons (grid)\n  ctx.strokeStyle = '#e5e7eb'; // neutral-200\n  ctx.lineWidth = 1;\n\n  const levels = 5;\n  for (let level = 1; level <= levels; level++) {\n    const r = (radius / levels) * level;\n    ctx.beginPath();\n    for (let i = 0; i < pointsCount; i++) {\n      const angle = i * angleStep - Math.PI / 2;\n      const x = centerX + r * Math.cos(angle);\n      const y = centerY + r * Math.sin(angle);\n      if (i === 0) ctx.moveTo(x, y);\n      else ctx.lineTo(x, y);\n    }\n    ctx.closePath();\n    ctx.stroke();\n  }\n\n  // Draw axis lines and labels\n  ctx.strokeStyle = '#9ca3af'; // neutral-400\n  ctx.fillStyle = '#374151'; // neutral-700\n  ctx.font = '12px sans-serif';\n  ctx.textAlign = 'center';\n  ctx.textBaseline = 'middle';\n\n  for (let i = 0; i < pointsCount; i++) {\n    const angle = i * angleStep - Math.PI / 2;\n    const x = centerX + radius * Math.cos(angle);\n    const y = centerY + radius * Math.sin(angle);\n\n    // axis line\n    ctx.beginPath();\n    ctx.moveTo(centerX, centerY);\n    ctx.lineTo(x, y);\n    ctx.stroke();\n\n    // label (position slightly outside the radius)\n    const labelX = centerX + (radius + 20) * Math.cos(angle);\n    const labelY = centerY + (radius + 20) * Math.sin(angle);\n    ctx.fillText(labels[i], labelX, labelY);\n  }\n\n  // Plot data polygon\n  ctx.strokeStyle = '#3b82f6'; // blue-500\n  ctx.fillStyle = 'rgba(59, 130, 246, 0.4)'; // blue-500 with opacity\n  ctx.lineWidth = 2;\n  ctx.beginPath();\n\n  for (let i = 0; i < pointsCount; i++) {\n    const valueRatio = (data[i] - scaleMin) / (scaleMax - scaleMin);\n    const r = radius * valueRatio;\n    const angle = i * angleStep - Math.PI / 2;\n    const x = centerX + r * Math.cos(angle);\n    const y = centerY + r * Math.sin(angle);\n    if (i === 0) ctx.moveTo(x, y);\n    else ctx.lineTo(x, y);\n  }\n  ctx.closePath();\n  ctx.fill();\n  ctx.stroke();\n\n  // Draw data points\n  ctx.fillStyle = '#1e40af'; // blue-800\n  for (let i = 0; i < pointsCount; i++) {\n    const valueRatio = (data[i] - scaleMin) / (scaleMax - scaleMin);\n    const r = radius * valueRatio;\n    const angle = i * angleStep - Math.PI / 2;\n    const x = centerX + r * Math.cos(angle);\n    const y = centerY + r * Math.sin(angle);\n\n    ctx.beginPath();\n    ctx.arc(x, y, 4, 0, 2 * Math.PI);\n    ctx.fill();\n  }\n\n  // Title\n  if (title) {\n    ctx.fillStyle = '#374151'; // neutral-700\n    ctx.font = '16px sans-serif';\n    ctx.textAlign = 'center';\n    ctx.fillText(title, centerX, padding / 2);\n  }\n\n  // Legend (single dataset)\n  const legendX = width - 140;\n  const legendY = 40;\n  const radiusLegend = 8;\n\n  ctx.fillStyle = '#3b82f6'; // blue-500\n  ctx.beginPath();\n  ctx.arc(legendX + radiusLegend, legendY + radiusLegend, radiusLegend, 0, 2 * Math.PI);\n  ctx.fill();\n\n  ctx.fillStyle = '#374151'; // neutral-700\n  ctx.font = '12px sans-serif';\n  ctx.textAlign = 'left';\n  ctx.textBaseline = 'middle';\n  ctx.fillText('Dataset 1', legendX + radiusLegend * 2 + 8, legendY + radiusLegend);\n</script>\n"
      },
      {
        "id": "scatter",
        "name": "scatter",
        "code": "<div\n  className=\"w-full max-w-md rounded-lg border border-neutral-200 p-4 shadow dark:border-neutral-800 dark:shadow-neutral-100/10\">\n  <canvas id=\"scatterChart\" width=\"400\" height=\"200\" className=\"h-auto w-full\" />\n</div>\n<!-- Script -->\n<script type=\"text/javascript\">\n  const canvas = document.getElementById('scatterChart');\n  if (!canvas) return;\n  const ctx = canvas.getContext('2d');\n  if (!ctx) return;\n\n  const width = canvas.width;\n  const height = canvas.height;\n\n  const padding = 50;\n  const bottomPadding = 70;\n  const leftPadding = 70;\n\n  ctx.clearRect(0, 0, width, height);\n\n  // Find min/max for scaling\n  const xValues = data.map((p) => p.x);\n  const yValues = data.map((p) => p.y);\n  const xMin = Math.min(...xValues);\n  const xMax = Math.max(...xValues);\n  const yMin = Math.min(...yValues);\n  const yMax = Math.max(...yValues);\n\n  const chartWidth = width - leftPadding - padding;\n  const chartHeight = height - bottomPadding - padding;\n\n  // Draw grid lines\n  ctx.strokeStyle = '#e5e7eb'; // neutral-200\n  ctx.lineWidth = 1;\n\n  const ySteps = 5;\n  for (let i = 0; i <= ySteps; i++) {\n    const y = padding + (chartHeight / ySteps) * i;\n    ctx.beginPath();\n    ctx.moveTo(leftPadding, y);\n    ctx.lineTo(width - padding, y);\n    ctx.stroke();\n  }\n\n  const xSteps = 5;\n  for (let i = 0; i <= xSteps; i++) {\n    const x = leftPadding + (chartWidth / xSteps) * i;\n    ctx.beginPath();\n    ctx.moveTo(x, padding);\n    ctx.lineTo(x, height - bottomPadding);\n    ctx.stroke();\n  }\n\n  // Draw axes\n  ctx.strokeStyle = '#9ca3af'; // neutral-400\n  ctx.lineWidth = 2;\n\n  // Y axis\n  ctx.beginPath();\n  ctx.moveTo(leftPadding, padding);\n  ctx.lineTo(leftPadding, height - bottomPadding);\n  ctx.stroke();\n\n  // X axis\n  ctx.beginPath();\n  ctx.moveTo(leftPadding, height - bottomPadding);\n  ctx.lineTo(width - padding, height - bottomPadding);\n  ctx.stroke();\n\n  // Draw Y axis labels\n  ctx.fillStyle = '#374151'; // neutral-700\n  ctx.font = '12px sans-serif';\n  ctx.textAlign = 'right';\n  ctx.textBaseline = 'middle';\n  for (let i = 0; i <= ySteps; i++) {\n    const y = padding + (chartHeight / ySteps) * i;\n    const value = yMax - ((yMax - yMin) / ySteps) * i;\n    ctx.fillText(value.toFixed(2), leftPadding - 8, y);\n  }\n\n  // Draw X axis labels\n  ctx.textAlign = 'center';\n  ctx.textBaseline = 'top';\n  for (let i = 0; i <= xSteps; i++) {\n    const x = leftPadding + (chartWidth / xSteps) * i;\n    const value = xMin + ((xMax - xMin) / xSteps) * i;\n    ctx.fillText(value.toFixed(2), x, height - bottomPadding + 6);\n  }\n\n  // Draw data points\n  ctx.fillStyle = pointColor;\n  data.forEach(({ x, y }) => {\n    const px = leftPadding + ((x - xMin) / (xMax - xMin)) * chartWidth;\n    const py = padding + ((yMax - y) / (yMax - yMin)) * chartHeight;\n    ctx.beginPath();\n    ctx.arc(px, py, 5, 0, 2 * Math.PI);\n    ctx.fill();\n  });\n\n  // Axis names\n  ctx.fillStyle = '#374151';\n  ctx.font = '14px sans-serif';\n  ctx.textAlign = 'center';\n\n  // X-axis name\n  ctx.fillText(xLabel, width / 2, height - 20);\n\n  // Y-axis name\n  ctx.save();\n  ctx.translate(20, height / 2);\n  ctx.rotate(-Math.PI / 2);\n  ctx.fillText(yLabel, 0, 0);\n  ctx.restore();\n\n  // Title\n  ctx.fillText(title, width / 2, 30);\n\n  // Legend - draw circle instead of rect\n  const legendX = width - 150;\n  const legendY = 40;\n  const radius = 8;\n\n  ctx.fillStyle = pointColor;\n  ctx.beginPath();\n  ctx.arc(legendX + radius, legendY + radius, radius, 0, 2 * Math.PI);\n  ctx.fill();\n\n  ctx.fillStyle = '#374151';\n  ctx.font = '12px sans-serif';\n  ctx.textAlign = 'left';\n  ctx.textBaseline = 'middle';\n  ctx.fillText('Data Points', legendX + radius * 2 + 8, legendY + radius);\n</script>\n"
      }
    ]
  },
  "__N_SSG": true
}
